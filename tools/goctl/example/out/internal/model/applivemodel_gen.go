// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	appLiveFieldNames          = builder.RawFieldNames(&AppLive{})
	appLiveRows                = strings.Join(appLiveFieldNames, ",")
	appLiveRowsExpectAutoSet   = strings.Join(stringx.Remove(appLiveFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	appLiveRowsWithPlaceHolder = strings.Join(stringx.Remove(appLiveFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	appLiveModel interface {
		Insert(ctx context.Context, data *AppLive) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AppLive, error)
		Update(ctx context.Context, data *AppLive) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAppLiveModel struct {
		conn  sqlx.SqlConn
		table string
	}

	AppLive struct {
		Id    int64  `db:"id"`
		Image string `db:"image"` // 图片
		Url   string `db:"url"`   // 跳转路径
	}
)

func newAppLiveModel(conn sqlx.SqlConn) *defaultAppLiveModel {
	return &defaultAppLiveModel{
		conn:  conn,
		table: "`app_live`",
	}
}

func (m *defaultAppLiveModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAppLiveModel) FindOne(ctx context.Context, id int64) (*AppLive, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", appLiveRows, m.table)
	var resp AppLive
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAppLiveModel) Insert(ctx context.Context, data *AppLive) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, appLiveRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Image, data.Url)
	return ret, err
}

func (m *defaultAppLiveModel) Update(ctx context.Context, data *AppLive) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, appLiveRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Image, data.Url, data.Id)
	return err
}

func (m *defaultAppLiveModel) tableName() string {
	return m.table
}
